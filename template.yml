AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Parameters:
  Environment:
    Type: String
  Shard:
    Type: Integer
    Default: 1
    Description: The amount of shards contained in a stream
Resources:
  # =========================================================================================
  # IAM ROLE, POLICY
  # =========================================================================================
  IAM_ROLE:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub '${Environment}-${AWS::StackName}-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
            - firehose.amazonaws.com
            - kinesis.amazonaws.com
            - logs.amazonaws.com
            - s3.amazonaws.com
            - glue.amazonaws.com
            - dynamodb.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - arn:aws:IAM::aws:policy/AmazonKinesisFullAccess
      - arn:aws:IAM::aws:policy/AWSLambdaExecute
      Path: '/'

  IAM_POLICY:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Sub '${Environment}-${AWS::StackName}-policy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: DeliverStreamAccess
          Effect: Allow
          Action:
          - firehose:CreateDeliveryStream
          - firehose:DeleteDeliveryStream
          - firehose:DescribeDeliveryStream
          - firehose:PutRecord
          - firehose:PutRecordBatch
          - firehose:UpdateDestination
          - firehose:ListDeliveryStreams
          Resource: !Join
            - ''
            - - 'arn:aws:firehose:*:*:deliverystream/'
              - !Ref DELIVER_STREAM.DeliveryStreamName
        - Sid: DataStreamAccess
          Effect: Allow
          Action:
          - kinesis:CreateStream
          - kinesis:DeleteStream
          - kinesis:DescribeStream
          - kinesis:GetShardIterator
          - kinesis:ListShards
          - kinesis:DescribeStreamSummary
          - kinesis:GetRecords
          - kinesis:PutRecord
          - kinesis:PutRecords
          - kinesis:UpdateShardCount
          Resource: !Join
            - ''
            - - 'arn:aws:kinesis:*:*:stream/'
              - !Ref DELIVER_STREAM.DeliveryStreamName
        - Sid: S3Access
          Effect: Allow
          Action:
          - s3:PutObject
          - s3:AbortMultipartUpload
          - s3:GetBucketLocation
          - s3:GetObject
          - s3:ListBucket
          - s3:ListBucketMultipartUploads
          Resource: !Ref S3_BUCKET.Arn
        - Sid: LogsAccess
          Effect: Allow
          Action:
          - logs:CreateLogGroup
          - logs:DeleteLogGroup
          - logs:CreateLogStream
          - logs:DeleteLogStream
          - logs:PutLogEvents
          - logs:DeleteRetentionPolicy
          Resource: !Join
            - ''
            - - 'arn:aws:logs:*:log-group:'
              - !Ref LOG_GROUP.LogGroupName
              - ':*'
        - Sid: LambdaAccess
          Effect: Allow
          Action:
          - lambda:InvokeFunction
          - lambda:GetFunctionConfiguration
          Resource: arn:aws:lambda:*:*:*:*:*
        - Sid: GlueAccess
          Effect: Allow
          Action:
          - glue:CreateTable
          - glue:CreateDatabase
          - glue:GetDatabase
          - glue:GetPartition
          - glue:GetTable
          - glue:UpdateTable
          - glue:UpdatePartition
          - glue:BatchGetPartition
          - glue:BatchCreatePartition
          Resource: arn:aws:glue:*:*:*
        - Sid: DynamoDBAccess
          Effect: Allow
          Action:
          - dynamodb:GetRecords
          - dynamodb:GetShardIterator
          - dynamodb:DescribeStream
          - dynamodb:ListShards
          - dynamodb:ListStreams
          Resource: arn:aws:dynamodb:us-east-1:*:table/*/stream/*
      Roles:
      - !Ref IAM_ROLE

  # =========================================================================================
  # KINESIS DATA STREAM
  # =========================================================================================
  DATA_STREAM:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: !Sub '${Environment}-${AWS::StackName}-Kinesis-Stream'
      ShardCount: !Ref Shard
      RetentionPeriodHours: 8760

  # =========================================================================================
  # Logs
  # =========================================================================================
  # log group
  LOG_GROUP:
    Type: AWS::Logs::LogGroup
    Properties: 
      LogGroupName: !Sub '${Environment}-${AWS::StackName}-Log-Group'
  # log stream
  LOG_STREAM:
    Type: AWS::Logs::LogStream
    Properties:
      LogGroupName: !GetAtt LOG_GROUP.LogGroupName

  # =========================================================================================
  # S3 Bucket
  # =========================================================================================
  S3_BUCKET:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub '${Environment}-${AWS::StackName}-Crawler-Target'
      AccessControl: 'BucketOwnerFullControl'

  # =========================================================================================
  # Glue Crawlers
  # =========================================================================================
  GLUE_CRAWLER:
    Type: AWS::Glue::Crawler
    Properties: 
      Configuration: '{"Version": 1.0, "Grouping": {"TableGroupingPolicy": "CombineCompatibleSchemas" }, "CrawlerOutput": {"Partitions": { "AddOrUpdateBehavior": "InheritFromTable" }}}'
      DatabaseName: !Sub '${Environment}-${AWS::StackName}-Raw'
      Name: !Sub '${Environment}-${AWS::StackName}-Glue-Crawler'
      RecrawlPolicy:
        RecrawlBehavior: 'CRAWL_NEW_FOLDERS_ONLY'
      Role: !Ref IAM_ROLE
      Schedule:
        ScheduleExpression: 'cron(1 * * * ? *)'
      SchemaChangePolicy:
        DeleteBehavior: 'LOG'
        UpdateBehavior: 'LOG'
      Targets:
        S3Targets:
          - Path: !Ref MyS3Bucket

  # =========================================================================================
  # Kinesis Deliver Stream
  # =========================================================================================
  DELIVER_STREAM:
    Type: AWS::KinesisFirehose::DeliveryStream
    Properties: 
      DeliveryStreamName: !Sub '${Environment}-${AWS::StackName}-Deliver-Stream'
      DeliveryStreamType: 'KinesisStreamAsSource'
      ExtendedS3DestinationConfiguration: 
        BucketARN: !Ref S3_BUCKET.Arn
        BufferingHints:
          SizeInMBs: 128
          IntervalInSeconds: 900
        RoleARN: !Ref IAM_ROLE.Arn
        Prefix:
        ErrorOutputPrefix:
        CompressionFormat: 'GZIP'
        DataFormatConversionConfiguration:
          Enabled: true
        EncryptionConfiguration:
          NoEncryptionConfig: 'NoEncryption'
        CloudWatchLoggingOptions:
          Enabled: true
          LogGroupName: !Ref LOG_GROUP.LogGroupName
          LogStreamName: !Ref LOG_STREAM.LogStreamName
      KinesisStreamSourceConfiguration: 
        KinesisStreamARN: !Ref DATA_STREAM.Arn
        RoleARN: !Ref IAM_ROLE.Arn

  # =========================================================================================
  # AWS LAMBDA FUNCTION
  # ========================================================================================= 
  STREAMING_FUNCTION:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub '${Environment}-${AWS::StackName}-Streaming-Function'
      Handler: lambda_function.lambda_handler
      Runtime: python3.7
      CodeUri: lambda/
      Description: Deliver new data into S3 whenever a new upsert in DynamoDB tables is detected via Kinesis
      MemorySize: 128
      Timeout: 900
      Role: !GetAtt IAM_ROLE.Arn
      Environment:
        Variables:
          LOGGING_LEVEL: INFO
          APP_NAME: !Sub '${Environment}-${AWS::StackName}-Streaming-Function'
          APP_ENV: !Ref Environment
          DATA_STREAM: !REf DATA_STREAM.Name
      Events:
        Type: DynamoDB
        Properties:
          BatchSize: 1000
          StartingPosition: TRIM_HORIZON
          MaximumRetryAttempts: 1

  # =========================================================================================
  # AWS CLOUDWATCH ALARM
  # =========================================================================================
  TOPIC:
    Type: AWS::SNS::Topic
    Properties: 
      FifoTopic: false
      Subscription: 
        - Endpoint: abc@gmail.com
          Protocol: email
      TopicName: !Sub '${Environment}-${AWS::StackName}-Topic'
      TracingConfig: String

  DATA_STREAM_ALARM:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: 'WriteProvisionedThroughputExceeded'
      Namespace: 'AWS/Kinesis'
      Period: 300
      Dimensions:
        - Name: StreamName
          Value: !Ref DATA_STREAM.Name
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      DatapointsToAlarm: 1
      Threshold: 1
      AlarmName: !Sub '${Environment}-${AWS::StackName}-Data-Stream-Alarm'
      ActionsEnabled: true
      TreatMissingData: missing
      AlarmActions:
        - !Ref TOPIC.Arn
  
  DELIVER_STREAM_ALARM:
    Type: AWS::CloudWatch::Alarm
    Properties:
      MetricName: 'WriteProvisionedThroughputExceeded'
      Namespace: 'AWS/Kinesis'
      Period: 300
      Dimensions:
        - Name: StreamName
          Value: !Ref DELIVER_STREAM.Name
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      Period: 300
      Statistic: Sum
      DatapointsToAlarm: 1
      Threshold: 1
      AlarmName: !Sub '${Environment}-${AWS::StackName}-Deliver-Stream-Alarm'
      ActionsEnabled: true
      TreatMissingData: missing
      AlarmActions:
        - !Ref TOPIC.Arn

  STREAMING_FUNCTION_ALARM:
    Type: AWS::CloudWatch::Alarm
    Properties:
      ComparisonOperator: GreaterThanOrEqualToThreshold
      Dimensions:
        - Name: FunctionName
          Value: !Ref STREAMING_FUNCTION
      EvaluationPeriods: 1
      MetricName: Errors
      Namespace: AWS/Lambda
      Period: 300
      Statistic: Sum
      Threshold: '1'
      AlarmActions: 
        - arn:aws:sns:us-east-1:{id}:{alarm-name}